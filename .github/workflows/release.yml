name: Release to PyPI

on:
  push:
    branches:
      - main
    paths-ignore:
      - "agentx/version.py" # Prevent infinite loops
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel packaging

      - name: Get current version
        id: current_version
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          python -c "
          import re
          with open('agentx/version.py', 'r') as f:
              content = f.read()
          current_version = re.search(r'VERSION = \"([^\"]+)\"', content).group(1)
          print(f'current_version={current_version}')
          " >> $GITHUB_OUTPUT

      - name: Bump version (only on main branch pushes)
        id: bump
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          python -c "
          import re
          with open('agentx/version.py', 'r') as f:
              content = f.read()
          current_version = re.search(r'VERSION = \"([^\"]+)\"', content).group(1)
          from packaging import version
          v = version.parse(current_version)
          new_version = f'{v.major}.{v.minor}.{v.micro + 1}'
          new_content = content.replace(f'VERSION = \"{current_version}\"', f'VERSION = \"{new_version}\"')
          with open('agentx/version.py', 'w') as f:
              f.write(new_content)
          print(f'Bumped version from {current_version} to {new_version}')
          print(f'new_version={new_version}')
          " | tee /tmp/version_output.txt
          grep 'new_version=' /tmp/version_output.txt >> $GITHUB_OUTPUT

      - name: Commit and push version bump
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add agentx/version.py
          git commit -m "Bump version to ${{ steps.bump.outputs.new_version }} [skip ci]"
          git push origin main

      - name: Wait for version bump to be available
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Waiting for version bump commit to be available..."
          sleep 30  # Increased wait time to ensure GitHub processes the push

          # Verify the version bump was successful by checking out fresh
          git fetch origin main
          git checkout main
          git pull origin main

          # Verify the version was actually bumped
          python -c "
          import re
          with open('agentx/version.py', 'r') as f:
              content = f.read()
          actual_version = re.search(r'VERSION = \"([^\"]+)\"', content).group(1)
          expected_version = '${{ steps.bump.outputs.new_version }}'
          if actual_version != expected_version:
              print(f'ERROR: Version mismatch! Expected {expected_version}, got {actual_version}')
              exit(1)
          print(f'Version verification successful: {actual_version}')
          "

      - name: Verify setup.py version
        run: |
          python -c "
          import sys
          sys.path.insert(0, '.')
          from setup import get_version
          version = get_version()
          print(f'setup.py get_version() returns: {version}')
          "

      - name: Build package
        run: |
          # Clean any previous builds
          rm -rf dist/ build/ *.egg-info/

          # Double-check we're using the correct version before building
          python -c "
          import re
          with open('agentx/version.py', 'r') as f:
              content = f.read()
          version = re.search(r'VERSION = \"([^\"]+)\"', content).group(1)
          print(f'Building package with version: {version}')
          "

          python -m build

      - name: Verify built package version
        run: |
          # Verify the built package has the correct version
          python -c "
          import tarfile
          import os
          import re

          # Find the built package
          dist_files = [f for f in os.listdir('dist') if f.endswith('.tar.gz')]
          if not dist_files:
              print('ERROR: No tar.gz package found in dist/')
              exit(1)

          package_file = dist_files[0]
          print(f'Checking package: {package_file}')

          # Extract and check version
          with tarfile.open(f'dist/{package_file}', 'r:gz') as tar:
              # Find the PKG-INFO file
              pkg_info_files = [f for f in tar.getnames() if f.endswith('PKG-INFO')]
              if pkg_info_files:
                  pkg_info = tar.extractfile(pkg_info_files[0])
                  content = pkg_info.read().decode('utf-8')
                  print(f'PKG-INFO content:\\n{content}')
                  version_match = re.search(r'Version: (.+)', content)
                  if version_match:
                      package_version = version_match.group(1)
                      print(f'Package version: {package_version}')
                      
                      # Compare with expected version
                      with open('agentx/version.py', 'r') as f:
                          version_content = f.read()
                      expected_version = re.search(r'VERSION = \"([^\"]+)\"', version_content).group(1)
                      
                      if package_version != expected_version:
                          print(f'ERROR: Package version mismatch! Expected {expected_version}, got {package_version}')
                          exit(1)
                      print('Package version verification successful!')
                  else:
                      print('ERROR: Could not find version in PKG-INFO')
                      exit(1)
              else:
                  print('ERROR: No PKG-INFO file found in package')
                  exit(1)
          "

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          release_name: Release v${{ steps.bump.outputs.new_version }}
          body: |
            Automated release for version ${{ steps.bump.outputs.new_version }}

            Changes in this release:
            - Automated version bump from ${{ steps.current_version.outputs.current_version }} to ${{ steps.bump.outputs.new_version }}
            - PyPI package update
          draft: false
          prerelease: false
